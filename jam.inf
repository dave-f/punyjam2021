!% -~S
!% $OMIT_UNUSED_ROUTINES=1

! The very first lines of the main source code file for a game can contain compiler options, like the two lines above.
! -~S disables strict error checking. This is otherwise used in z5 and z8 games by default. While useful for debugging,
!   it adds ~10 KB to the story file size and it makes the game slower.
! $OMIT_UNUSED_ROUTINES=1 makes the compiler remove all routines which aren't used. This can save some space.

Constant Story      "Your gamename goes here"; ! Change!
Constant Headline   "^A PunyJam #1 game.^"; ! Change if you like

! Uncomment ONE of the two following lines, to show either time or score/turns
! Leaving both commented out makes the library bigger.
!Constant STATUSLINE_TIME; Statusline time;
Constant STATUSLINE_SCORE; Statusline score;

! Uncomment to not keep track of score
! The value is what will be shown as the score on statusline in z3
!Constant NO_SCORE = 0;

! Uncomment to add optional features to PunyInform
!Constant DEBUG;
!Constant CUSTOM_ABBREVIATIONS;
!Constant OPTIONAL_NO_DARKNESS;
!Constant OPTIONAL_ALLOW_WRITTEN_NUMBERS;
!Constant OPTIONAL_EXTENDED_METAVERBS;
!Constant OPTIONAL_EXTENDED_VERBSET;
!Constant OPTIONAL_PRINT_SCENERY_CONTENTS;
!Constant OPTIONAL_SCORED;
!Constant OPTIONAL_FULL_SCORE; ! Comment out NO_SCORE when uncommenting this
!Constant OPTIONAL_FULL_DIRECTIONS;
Constant OPTIONAL_SIMPLE_DOORS;
!Constant OPTIONAL_SHIP_DIRECTIONS;
!Constant OPTIONAL_GUESS_MISSING_NOUN;
!Constant OPTIONAL_MANUAL_SCOPE;
!Constant OPTIONAL_MANUAL_REACTIVE;
!Constant OPTIONAL_ORDERED_TIMERS;
!Constant OPTIONAL_PROVIDE_UNDO;
!Constant OPTIONAL_REACTIVE_PARSE_NAME;
!Constant RUNTIME_ERRORS = 0; ! 0, 1 or 2. 0 = smallest file, 2 = most info

! Define any library constants you need here, like MAX_SCORE, AMUSING_PROVIDED,
! MAX_CARRIED, SACK_OBJECT,  etc.

Constant INITIAL_LOCATION_VALUE = BroomCloset;

! Define your own global variables here, if any

! Define the entry point routines you need here, like Amusing, DarkToDark etc.

! Uncomment to add PunyLib extensions
!Include "ext_menu.h";
!Include "ext_flags.h";
!Include "ext_quote_box.h";
!Include "ext_cheap_scenery.h";

Include "globals.h";
Include "puny.h";

! Uncomment to add PunyLib extensions
!Include "ext_waittime.h";

! ------------------------------ Pub ------------------------------

Object BroomCloset "Broom Closet"
    with
        description [;
            print "You're in the rather dirty broom closet of The Red Anchor.  Various cleaning appliances line the walls.";
            if (~~ self.fabric_taken)
                " There's a pile of fabric in a corner.";
            "";
        ],
        e_to BroomClosetDoor,
        fabric_taken,
        initial [;
            if (~~self.visited)
            {
                self.fabric_taken = false;
            }
        ],
    has light;

Object -> PileOfFabric "pile of fabric"
    with
        name 'pile' 'of' 'fabric' 'bandages',
        description "The fabric is bits of bandage that have come off, more than likely when that clumsy policeman put you in here.",
        before [;
        Take: 
        if (Pipe.workingFlag==1) { "The fabric is now stuck onto the pipe."; }
        ],
        after [;
        Take: give self ~concealed; BroomCloset.fabric_taken = true;
        ],
    has concealed;

Object -> Appliances "Cleaning appliances"
    with
        name 'cleaning' 'appliances',
        description "Various cleaning bits and pieces all of which look too dirty to touch.",
    has scenery;

Object -> Note "note"
    with
        name 'note',
        initial "A note has been fixed to the wall with a knife.",
        description "The note appears to have been written in a hurry.  It reads: 'Glad you could join us again - don't have time to get the details down, suffice it to say it looks like it's happening again.  I'm getting some real heat on this one and could really use some help.   I'll be waiting down the station when you're ready - mind how yer go.'",
        after [;
            Take:
                if(Knife hasnt moved && self hasnt general) {
                    ! Use the general attribute to say we've already pulled
                    ! the note from the wall, so we don't print this twice.
                    give self general;
                    "The knife rips a long hole in the note as you pull the
                        note from the wall.";
                }
        ];

Object -> Knife "knife"
    with
        name 'knife',
        description "The knife is pure gold and encrusted with jewels.  You recognise it immediately as the object capable of bringing you to existence.",
        describe [;
            if(self hasnt moved) {
                if(Note hasnt moved) {
                    ! Knife and note haven't moved. Knife is mentioned in
                    ! description of note
                    rtrue;
                }
                ! The knife hasnt been moved but the note is gone.
                "^A knife is stuck to the wall.";
            }
            ! The knife has been moved. Now it should just be described as a
            ! regular object
            rfalse;
        ],
        after [;
            Take:
                if(Note hasnt moved) {
                    give Note moved;
                    "The note falls to the floor as you pull out the knife.";
                }
        ];

Object BroomClosetDoor "broom closet door"
    with
        parse_name [ w1 w2 w3;
            w1 = NextWord(); w2 = NextWord(); w3 = NextWord();
            if(w1 == 'broom' && w2 == 'closet' && w3 == 'door') return 3;
            if(w1 == 'closet' && w2 == 'door') return 2;
            if (location == BroomCloset)
            {
                if(w1 == 'door') return 1;
            }
        ],
        when_open [;
            if(self in BroomCloset)
                "You can see the pub through the door opening to the east.";
            "The door to the west is open, revealing a broom closet.";
        ],
        when_closed [;
            if(self in BroomCloset)
                "The pub lies beyond the closed door to the east.";
            "There's a closed door to the west.";
        ],
        found_in BroomCloset Pub,
        door_dir (e_to) (w_to),
    has static door openable;

Object Pub "Pub"
    with
        description [;
            if (self hasnt visited)
            {
                print "As you step out the broom closet, the barman rushes over, ~Took yer bleedin' time didn't you, getting slow in yer old age~, he chuckles, before nearly coughing up a lung.  ~Well listen, I don't have time to be helping you on your feet, this damn beer pump is on the blink again.  Suffice it to say they're after you over the station again~.  Having said his piece, he returns to fiddling with a beer pump.^^";
            }
            "The pub itself is a small establishment, providing drinkers the very basics - beer and a place to sit.  Still, it manages to keep open through hard times.  The barman keeps his ear to the ground as a favour for the local police, although what he gets in return you've still not got to the bottom of.  Steps lead down to the cellar, east leads to a bathroom, while to the north is the door out.";
        ],
        initial [;
            if ((~~Barman.givenFlag) && (Pipe.workingFlag==1))
            {
                Barman.givenFlag = 1;
                move Coat to location;
                move Hat to location;
                give PubDoor ~locked;
                "As you return to the bar, it's apparent the mood of the barman is much improved.  ~Dunno what you've been doing down there, but it's certainly got this beer flowing!~ he exclaims, before hurridly rushing to the front door to unlock it.  ~By the way, don't forget the gear, old chap~,  he says, and throws over a coat and hat.^";
            }
        ],
        w_to BroomClosetDoor,
        e_to Bathroom,
        n_to PubDoor,
        d_to Cellar
    has light;

Object  -> PubDoor "pub door" !name 'pub' 'door',
 with   !name 'pub' 'door', 
        parse_name [ w1 w2;
            w1 = NextWord(); w2 = NextWord();
            if(w1 == 'pub' && w2 == 'door') return 2;
            if (location == Pub)
            {
                if (w1 == 'door')
                {
                    print "(Assuming pub door) ";
                    return 1;
                }
            }
        ],
        description [;
            print "The pub door keeps the elements out";
            if (self has locked)
            {
                ", and currently locks you in.";
            }
            else
            {
                ".";
            }
        ],
        before [;
          UnlockWithoutKey: "The barman is very protective about his keys for the pub, best to leave it to him.";
          LockWithoutKey: "The barman is very protective about his keys for the pub, best to leave it to him.";
        ],
        door_to OutsidePub,
        door_dir n_to,
 has    scenery door openable lockable locked;

Object -> BeerPump "beer pump"
       with name 'beer' 'pump',
            description "A standard beer pump.  It's seen better days, but so has the rest of the place.",
       has  scenery;

Object -> Barman "barman"
with   parse_name [ i;
         while(NextWord() == 'barman' or 'bartender' or 'bartend' or 'man' or 'waiter') i++;
         return i;
        ],
        description [;
           if (Pipe.workingFlag==1)
           {
             "The barman stands here, polishing glasses.";
           }
           else
           {
             "The barman is here, alternately pulling feverishly at the beer pump, and swearing.";
           }
        ],
        life [;
         Answer: "The barman seems uninterested and continues polishing his glasses.";
         Ask: switch (second)
         {
          'knife' : "~Beautiful thing ain't it? The Inspector'll be real keen on getting it back though I'd imagine?~";
          'policeman', 'police', 'inspector' : "The barman looks towards the door. ~I reckon something serious must've happened if they've got you out of hiding.~";
          'bathroom', 'toilet' : "Yeah, a bit grim but what can I say?  Most folk come here for the beer right?";
          'beer' : "~Well OK, it might not be the best in town but I don't get many complaints.~";
          'cellar', 'cask' : "~Always something going wrong in that cellar, couple of customers even say they've seen rats down there, but I don't believe 'em!~";
         }
        ],
        givenFlag 0,
 has    animate;

Object Coat "raincoat"
       with name 'rain' 'coat' 'raincoat' 'mac',
            description "The classic Mackintosh style coat, chosen as it covers a significant part of your body, and waterproof.",
       has clothing;

Object Hat "hat"
       with name 'hat',
            description "A rather smart felt bowler hat.  Coupled with the coat, makes a half-convincing disguise to the casual passer-by.",
       has clothing;

Object Bathroom "Pub bathroom"
    with
        description "This small, cramped, bathroom provides the very basics; toilet, sink and mirror.  Presumably anyone in use of this facility doesn't hang around for long afterwards.",
        w_to Pub,
    has light;

Object -> Toilet "toilet"
    with name 'toilet' 'bog',
         description "Looking at this rather sorry piece of porcelain, you're glad you no longer have the need to use it.",
    has scenery container open;

Object -> Sink "sink"
    with name 'sink',
         description "The sink is just about visible underneath the grime built up around it.  No plug of course, but that's probably for the best.^",
         after [;
             Examine: <Search self>;
         ],
    has scenery container open;

Object -> -> Sunglasses "sunglasses"
    with name 'sun' 'glasses' 'sunglasses',
         description "The sunglasses are plastic and look cheap, perhaps discarded after a night of revelry.",
    has clothing pluralname;

Object -> Mirror "mirror"
    with name 'mirror',
         description "You stare back at yourself with a stark realisation of how different you look, the bandages covering a significant part of your body.  You decide not to dwell too much.",
    has scenery;

Object Cellar "Beer cellar"
    with name 'feet',
         description "Cellar seems a somewhat grand choice of word for this small cramped area.  It's a tiny underground area with a pungent smell of beer.  Steps lead back up to the pub.",
    u_to Pub,
  has light;

Object -> Cask "beer cask"
    with name 'beer' 'cask',
         description "The beer cask is made of wood, and is raised off the ground by small wooden feet.  It is connected to the bar above by a small pipe.",
         before [;
         LookUnder:
            "You can just about make out a small mouse hole on the back wall underneath the cask.";
         Pull,Push:
            "The cask is pretty heavy, but you could probably look under it.";
         ],
  has static;

Object -> Pipe "pipe"
    with name 'pipe',
         description [;
            print "The pipe connects this cask to the beer pumps up above.  ";
            if (self.workingFlag==1)
            {
              "Some bandages are securely fixed to the pipe, stopping the leak.";
            }
            else
            {
              "It appears to have a small hole in it where beer is slowly leaking.";
            }
         ],
         before [;
         Receive:
            if (noun==PileOfFabric)
            {
                move PileOfFabric to Pipe;
                self.workingFlag=1;
                score++;
                "You attach the fabric to the pipe, which stops the leak.";
            }
            "Interesting concept!";
         ],
        workingFlag 0,
    has scenery supporter;

Object -> Hole "hole"
    with name 'hole',
         description [;
           if (Pipe.workingFlag==1)
           {
               "The hole has been sealed by some securely-fixed bandages.";
           }
           else
           {
               "The hole is small, but it is definitely causing a leak.";
           }
         ],
         before [;
         Receive:
           if (noun==PileOfFabric)
           {
              <<PutOn PileOfFabric Pipe>>;
           }
         ],
     has scenery container open;

Object -> MouseHole "mouse hole"
   with name 'mousehole',
        description "Above the mouse hole someone has inscribed 'Bliz & Nibs'.",
   has scenery container open;

!Not sure yet, perhaps just a bonus point?
!Object -> -> PyramidCharm "Pyramid Charm"
!   with name 'pyramid' 'charm',
!        description "A polished jade charm of a pyramid";

! ------------------------------ Street ------------------------------


! Part 1
! ------                                        |      Crypt     |
!                                               | Police Station |
! River |   Street       |   Street    | Street |     Street     | Graveyard |
!  |    | Broom cupboard |    Pub*     | Toilet |
!  V                     | Beer garden |
!
! Part 2
! ------

[Initialise;

    !Debug stuff
    !give PubDoor ~locked;

    print "^^With the familiar crackle you come into being once more.  Consciousness thrills you, and you take a moment enjoying what it feels like to exist, before your thoughts turn to why you are needed ...^^";!
];

[LookUnderSub;
  if(noun has animate or scenery) "What a concept!";
  if(noun in player) "But you are holding ", (ItOrThem) noun, "!";
  "You find nothing unexpected.";
];

[ UnlockWithoutKeySub;
  "You would need to specify which key to use, like ~unlock door with rusty key~.";
];

[ LockWithoutKeySub;
  "You would need to specify which key to use, like ~lock door with rusty key~.";
];  

Extend 'look' * 'under' noun -> LookUnder;
Extend 'unlock' first * noun -> UnlockWithoutKey;
Extend 'lock' first * noun -> LockWithoutKey;

Verb 'wrap' * held 'around' / 'on' noun -> PutOn;

Include ">street.inf";
Include ">station.inf";
Include ">graveyard.inf";